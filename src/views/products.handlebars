
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-Time Products</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f5f5f5;
            color: #333; 
            font-family: Arial, sans-serif; 
        }

        .card {
            border: none; 
            box-shadow: 0 0 10px rgba(0,0,0,0.1); 
            transition: box-shadow 0.3s ease; 
        }

        .card:hover {
            box-shadow: 0 0 15px rgba(0,0,0,0.2); 
        }

        .card-title {
            color: #333; 
        }

        .card-header {
            background-color: #007bff; 
            color: #fff; 
            border-bottom: none; /
        }
        .form-control {
            border-color: #ccc; 
        }

        .btn-primary {
            background-color: #007bff; 
            border-color: #007bff; 
        }

        .btn-primary:hover {
            background-color: #0056b3; 
            border-color: #0056b3; 
        }

        .btn-secondary {
            background-color: #6c757d; 
            border-color: #6c757d; 
        }

        .btn-secondary:hover {
            background-color: #5a6268; 
            border-color: #5a6268; 
        }

        .modal-content {
            background-color: #fff; 
            box-shadow: 0 0 15px rgba(0,0,0,0.2); 
        }

        .modal-header {
            background-color: #007bff; 
            color: #fff; 
            border-bottom: none; 
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="row">
            <div class="col-md-3">
                <form id="filterForm">
                    <h4>Filtros</h4>
                    <div class="form-group">
                        <label for="query">Categor√≠a:</label>
                        <input type="text" id="query" name="query" class="form-control">
                    </div>
                    <div class="form-group">
                        <label for="availability">Disponibilidad:</label>
                        <select id="availability" name="availability" class="form-control">
                            <option value="">Todas</option>
                            <option value="available">Disponible</option>
                            <option value="unavailable">No disponible</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="sort">Ordenar por precio:</label>
                        <select id="sort" name="sort" class="form-control">
                            <option value="">Sin orden</option>
                            <option value="asc">Ascendente</option>
                            <option value="desc">Descendente</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="col-md-9">
                <div id="productsContainer" class="row row-cols-1 row-cols-md-2 row-cols-lg-3"></div>
                <div id="pagination" class="d-flex justify-content-between mt-4"></div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="modalBody"></div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="/js/sendCart.js"></script>
    <script>
        let products = [];
        let cart = null;

        document.addEventListener('DOMContentLoaded', async () => {
            await createCart();
            fetchProducts();
        });

        document.getElementById('filterForm').addEventListener('change', function() {
            fetchProducts();
        });

        async function createCart() {
            const response = await fetch('/api/carts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            cart = await response.json();
        }

        async function fetchProducts(page = 1) {
            const query = document.getElementById('query').value;
            const availability = document.getElementById('availability').value;
            const sort = document.getElementById('sort').value;
            const limit = 6;

            const url = new URL('/api/products', window.location.origin);
            url.searchParams.set('query', query);
            url.searchParams.set('availability', availability);
            url.searchParams.set('sort', sort);
            url.searchParams.set('page', page);
            url.searchParams.set('limit', limit);

            const response = await fetch(url);
            const data = await response.json();

            products = data.payload;
            renderProducts(products);
            renderPagination(data);
        }

        function renderProducts(products) {
            const container = document.getElementById('productsContainer');
            container.innerHTML = '';

            products.forEach(product => {
                const productCard = `
                    <div class="col mb-4">
                        <div class="card h-100">
                            <div class="card-header">
                                <i class="bi bi-tag"></i> Code: ${product.code}
                            </div>
                            <div class="card-body">
                                <h5 class="card-title" id="title">${product.title}</h5>
                                <ul class="list-unstyled">
                                    <li><i class="bi bi-currency-dollar"></i> Price: $${product.price}</li>
                                    <li><i class="bi bi-check-circle"></i> Status: ${product.status}</li>
                                    <li>
                                        <img src="${product.thumbnail}" alt="${product.title}" class="img-fluid mt-2">
                                    </li>
                                </ul>
                                <div class="text-center mt-3">
                                    <a id="${product._id}" class="btn btn-primary" onclick="showProductDetails('${product._id}')">Ver Detalles</a>
                                    <button class="btn btn-success product" data-value="${product.stock}" id="${product._id}">Agregar al carrito</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                container.innerHTML += productCard;
            });

            document.querySelectorAll('.product').forEach(button => {
                button.addEventListener('click', addToCart);
            });
        }

        function renderPagination(data) {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            const prevPage = data.hasPrevPage ? `<a href="#" onclick="fetchProducts(${data.prevPage}); return false;" class="btn btn-primary">Prev Page</a>` : `<span class="btn btn-secondary disabled">Prev Page</span>`;
            const nextPage = data.hasNextPage ? `<a href="#" onclick="fetchProducts(${data.nextPage}); return false;" class="btn btn-primary">Next Page</a>` : `<span class="btn btn-secondary disabled">Next Page</span>`;
            
            pagination.innerHTML = `
                ${prevPage}
                <span>Page ${data.page} of ${data.totalPages}</span>
                ${nextPage}
            `;
        }

        async function addToCart(event) {
            const productId = event.target.id;
            const stock = Number(event.target.getAttribute('data-value'));
            const { value: quantity } = await Swal.fire({
                title: 'Agregar cantidad',
                input: 'number',
                inputAttributes: {
                    autocapitalize: 'off'
                },
                showCancelButton: true,
                confirmButtonText: 'Confirmar',
            });

            if (quantity !== null) {
                const quantityNumber = Number(quantity);
                if (quantityNumber > 0 && stock >= quantityNumber) {
                    try {
                        const response = await fetch(`/api/carts/${cart._id}/products/${productId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ "productId": productId, "quantity": quantityNumber }),
                        });
                        if (response.ok) {
                            Swal.fire({
                                title: 'Producto agregado exitosamente',
                                text: `ID: ${productId} - Cantidad: ${quantityNumber}`,
                                icon: 'success',
                            });
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: 'Hubo un error al agregar el producto al carrito',
                                icon: 'error',
                            });
                        }
                    } catch (error) {
                        console.error('Error al agregar el producto al carrito:', error);
                        Swal.fire({
                            title: 'Error',
                            text: 'Hubo un error al agregar el producto al carrito',
                            icon: 'error',
                        });
                    }
                } else if (quantityNumber <= 0) {
                    Swal.fire({
                        title: 'La cantidad debe ser mayor que 0',
                        icon: 'warning',
                    });
                } else {
                    Swal.fire({
                        title: 'La cantidad no puede ser mayor que el stock',
                        icon: 'error',
                    });
                }
            }
        }

        function showProductDetails(productId) {
            const product = products.find(product => product._id === productId);
            if (product) {
                window.location.href = `/products/${productId}`;
                displayProductDetailsModal(product);
            } else {
                console.error("Producto no encontrado en la lista de productos recibidos");
            }
        }

        function displayProductDetailsModal(product) {
            const modalTitle = document.getElementById('modalTitle');
            modalTitle.textContent = product.title;

            const modalBody = document.getElementById('modalBody');
            modalBody.innerHTML = `
                <p><strong>Descripci√≥n:</strong> ${product.description}</p>
                <p><strong>Precio:</strong> $${product.price}</p>
                <p><strong>ID:</strong> ${product._id}</p>
                <p><strong>Categoria:</strong> ${product.category}</p>
                <p><strong>Stock:</strong> ${product.stock}</p>
                <img src="${product.thumbnail}" alt="${product.title}" class="img-fluid">
            `;

            const productModal = new bootstrap.Modal(document.getElementById('productModal'));
            productModal.show();

            document.querySelector('.btn-close').addEventListener('click', () => {
                productModal.hide();
            });

            productModal._element.addEventListener('hidden.bs.modal', () => {
                const modalBackdrop = document.querySelector('.modal-backdrop');
                if (modalBackdrop) {
                    modalBackdrop.remove();
                }
            });
        }
    </script>
</body>
</html>
